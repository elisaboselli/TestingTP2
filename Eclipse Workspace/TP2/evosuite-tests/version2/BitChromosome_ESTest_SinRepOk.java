/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 01 15:37:32 ART 2018
 */

package version2;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome;
import ejercicio1.es.unileon.rnag.cubiga.chromosome.Chromosome;
import ejercicio1.es.unileon.rnag.cubiga.datatypes.BitVector;
import ejercicio1.es.unileon.rnag.cubiga.datatypes.GeneticType;
import ejercicio1.es.unileon.rnag.cubiga.datatypes.List;
import ejercicio1.es.unileon.rnag.cubiga.datatypes.ListVector;
import ejercicio1.es.unileon.rnag.cubiga.datatypes.Range;
import ejercicio1.es.unileon.rnag.cubiga.datatypes.RangeVector;
import ejercicio1.es.unileon.rnag.cubiga.gen.Gen;
import ejercicio1.es.unileon.rnag.cubiga.gen.ListGen;
import ejercicio1.es.unileon.rnag.cubiga.gen.RangeGen;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = false, useJEE = true) 
public class BitChromosome_ESTest_SinRepOk extends BitChromosome_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      BitChromosome bitChromosome1 = new BitChromosome(bitChromosome0);
      bitChromosome1.setFitness((-0.8789671875));
      bitChromosome0.equals(bitChromosome1);
      assertEquals(1, bitChromosome1.length());
      assertEquals(1, bitChromosome0.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      Gen[] genArray0 = bitChromosome0.getChromosomeSlice(0, 0);
      bitChromosome0.setChromosomeSlice(genArray0, 0);
      assertEquals(1, bitChromosome0.length());
      assertEquals(0, genArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(2, (GeneticType) null);
      Chromosome chromosome0 = bitChromosome0.copyChromosome();
      assertEquals(2, chromosome0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.setGen((Gen) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range[] rangeArray0 = new Range[4];
      RangeVector rangeVector0 = new RangeVector(rangeArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1929, rangeVector0);
      ListGen listGen0 = new ListGen("", rangeVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.setGen(listGen0, 1929);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1929
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List[] listArray0 = new List[5];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.setChromosomeSlice((Gen[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List[] listArray0 = new List[9];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      Gen[] genArray0 = new Gen[3];
      RangeGen rangeGen0 = new RangeGen(0, listVector0);
      genArray0[0] = (Gen) rangeGen0;
      // Undeclared exception!
      try { 
        bitChromosome0.setChromosomeSlice(genArray0, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(2383, (GeneticType) null);
      // Undeclared exception!
      try { 
        bitChromosome0.mutateGen(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(150, bitVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.mutateGen(150);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 150
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List[] listArray0 = new List[2];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.getGen(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List[] listArray0 = new List[6];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.getChromosomeSlice(0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(192, bitVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.getChromosomeSlice((-419), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -419
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List[] listArray0 = new List[5];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.equals((BitChromosome) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.Chromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BitChromosome bitChromosome0 = null;
      try {
        bitChromosome0 = new BitChromosome((BitChromosome) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      boolean boolean0 = bitChromosome0.equals(bitChromosome0);
      assertTrue(boolean0);
      assertEquals(1, bitChromosome0.length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(1, (GeneticType) null);
      bitChromosome0.setFitness(0.618234030403684);
      BitChromosome bitChromosome1 = new BitChromosome(1, (GeneticType) null);
      boolean boolean0 = bitChromosome1.equals(bitChromosome0);
      assertFalse(boolean0);
      assertEquals(1, bitChromosome1.length());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      Gen[] genArray0 = new Gen[3];
      // Undeclared exception!
      try { 
        bitChromosome0.setChromosomeSlice(genArray0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The selected slice does not fit in the position of the chromosome
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List[] listArray0 = new List[4];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.getChromosomeSlice(0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Index to be retrieved for this chromosome is out of bounds
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      bitChromosome0.iterator();
      assertEquals(1, bitChromosome0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.setGen((Gen) null, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(740, bitVector0);
      Gen gen0 = bitVector0.generateGen(0);
      bitChromosome0.setGen(gen0, 0);
      //  // Unstable assertion: assertEquals("true", gen0.getValue());
      //  // Unstable assertion: assertEquals(740, bitChromosome0.length());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      List[] listArray0 = new List[1];
      String[] stringArray0 = new String[3];
      List list0 = new List(stringArray0);
      listArray0[0] = list0;
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      Gen gen0 = listVector0.generateGen(0);
      // Undeclared exception!
      try { 
        bitChromosome0.setGen(gen0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.getGen((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      List[] listArray0 = new List[2];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      Gen gen0 = bitChromosome0.getGen(0);
      //  // Unstable assertion: assertEquals(1, bitChromosome0.length());
      //  // Unstable assertion: assertEquals("false", gen0.getValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.getGen(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      List[] listArray0 = new List[2];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.mutateGen((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(150, bitVector0);
      bitChromosome0.mutateGen(0);
      assertEquals(150, bitChromosome0.length());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(1, (GeneticType) null);
      // Undeclared exception!
      try { 
        bitChromosome0.mutateGen(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      List[] listArray0 = new List[38];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = null;
      try {
        bitChromosome0 = new BitChromosome(0, listVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BitChromosome must have a longitude greater than 0.
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }
}
