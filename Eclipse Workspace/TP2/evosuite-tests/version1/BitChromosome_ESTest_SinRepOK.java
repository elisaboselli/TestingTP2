/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 28 13:21:48 ART 2018
 */

package version1;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome;
import ejercicio1.es.unileon.rnag.cubiga.chromosome.Chromosome;
import ejercicio1.es.unileon.rnag.cubiga.datatypes.BitVector;
import ejercicio1.es.unileon.rnag.cubiga.datatypes.GeneticType;
import ejercicio1.es.unileon.rnag.cubiga.datatypes.List;
import ejercicio1.es.unileon.rnag.cubiga.datatypes.ListVector;
import ejercicio1.es.unileon.rnag.cubiga.gen.BitGen;
import ejercicio1.es.unileon.rnag.cubiga.gen.Gen;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = false, useJEE = true) 
public class BitChromosome_ESTest_SinRepOK extends BitChromosome_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List[] listArray0 = new List[4];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(2, listVector0);
      BitChromosome bitChromosome1 = new BitChromosome(bitChromosome0);
      assertEquals(2, bitChromosome1.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(602, bitVector0);
      bitChromosome0.mutateGen(0);
      assertEquals(602, bitChromosome0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      bitChromosome0.setFitness(1);
      Chromosome chromosome0 = bitChromosome0.copyChromosome();
      assertEquals(1, chromosome0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List[] listArray0 = new List[4];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      bitChromosome0.setFitness((-0.5));
      Chromosome chromosome0 = bitChromosome0.copyChromosome();
      assertEquals(1, chromosome0.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List[] listArray0 = new List[2];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.setGen((Gen) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(603, bitVector0);
      Gen gen0 = bitVector0.generateGen(0);
      // Undeclared exception!
      try { 
        bitChromosome0.setGen(gen0, 603);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 603
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(6, bitVector0);
      Gen[] genArray0 = new Gen[6];
      // Undeclared exception!
      try { 
        bitChromosome0.setChromosomeSlice(genArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(1, (GeneticType) null);
      Gen[] genArray0 = new Gen[1];
      BitGen bitGen0 = new BitGen(false, (GeneticType) null);
      genArray0[0] = (Gen) bitGen0;
      // Undeclared exception!
      try { 
        bitChromosome0.setChromosomeSlice(genArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1105);
      Chromosome chromosome0 = bitVector0.generateChromosome();
      // Undeclared exception!
      try { 
        chromosome0.mutateGen(1105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1105
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(2075, bitVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.getGen(2075);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2075
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.getChromosomeSlice(0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.getChromosomeSlice((-1), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BitChromosome bitChromosome0 = null;
      try {
        bitChromosome0 = new BitChromosome((BitChromosome) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List[] listArray0 = new List[4];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(714, listVector0);
      Gen[] genArray0 = bitChromosome0.getChromosomeSlice(0, 1);
      bitChromosome0.setChromosomeSlice(genArray0, 0);
      assertEquals(1, genArray0.length);
      assertEquals(714, bitChromosome0.length());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      List[] listArray0 = new List[4];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(714, listVector0);
      Gen[] genArray0 = bitChromosome0.getChromosomeSlice(0, 0);
      bitChromosome0.setChromosomeSlice(genArray0, 0);
      assertEquals(714, bitChromosome0.length());
      assertEquals(0, genArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      int int0 = bitChromosome0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      Gen[] genArray0 = new Gen[2];
      // Undeclared exception!
      try { 
        bitChromosome0.setChromosomeSlice(genArray0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The selected slice does not fit in the position of the chromosome
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.getChromosomeSlice(0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Index to be retrieved for this chromosome is out of bounds
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List[] listArray0 = new List[2];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      bitChromosome0.iterator();
      assertEquals(1, bitChromosome0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List[] listArray0 = new List[5];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.setGen((Gen) null, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(183, bitVector0);
      Gen gen0 = bitVector0.generateGen(0);
      bitChromosome0.setGen(gen0, 0);
      //  // Unstable assertion: assertEquals("true", gen0.getValue());
      //  // Unstable assertion: assertEquals(183, bitChromosome0.length());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      Gen[] genArray0 = new Gen[2];
      // Undeclared exception!
      try { 
        bitChromosome0.setGen(genArray0[0], 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(1, (GeneticType) null);
      // Undeclared exception!
      try { 
        bitChromosome0.getGen((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(2306, bitVector0);
      Gen gen0 = bitChromosome0.getGen(0);
      //  // Unstable assertion: assertEquals("0", gen0.toString());
      //  // Unstable assertion: assertEquals(2306, bitChromosome0.length());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(1, (GeneticType) null);
      // Undeclared exception!
      try { 
        bitChromosome0.getGen(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      List[] listArray0 = new List[2];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.mutateGen((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      List[] listArray0 = new List[2];
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.mutateGen(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.datatypes.ListVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.mutateGen(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BitChromosome bitChromosome0 = null;
      try {
        bitChromosome0 = new BitChromosome(0, (GeneticType) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BitChromosome must have a longitude greater than 0.
         //
         verifyException("ejercicio1.es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      Chromosome chromosome0 = bitChromosome0.copyChromosome();
      assertEquals(1, chromosome0.length());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      //boolean boolean0 = bitChromosome0.repOK();
      assertEquals(1, bitChromosome0.length());
      //assertTrue(boolean0);
  }
}
